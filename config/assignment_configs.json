{
  "hello-world-task-1": {
    "id": "hello-world-task-1",
    "title": "Create a Personalized Greeting Function",
    "problemStatement": "# Custom Greeting Generator\n\nWrite a function called `create_greeting` that creates a personalized greeting message. The function should:\n\n1. Take a single parameter `name` (string)\n2. Print exactly three lines:\n - First line: 'Hello, Python!'\n - Second line: The provided name\n - Third line: 'I'm ready to code!'\n\n## Requirements:\n- Use the print() function for each line\n- Maintain exact spacing and punctuation\n- Handle any input name correctly\n\n## Note:\n- Pay attention to the exact text and punctuation\n- Each message should be on its own line\n- The function should work for any valid input name",
    "starterCode": "def create_greeting(name):\n    # Write your code here\n    pass",
    "starterFunctionName": "create_greeting",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "create_greeting('Alice')",
        "outputText": "Hello, Python!\nAlice\nI'm ready to code!",
        "explanation": "When we call create_greeting with 'Alice', it prints three lines with the correct format"
      },
      {
        "id": "example2",
        "inputText": "create_greeting('Bob123')",
        "outputText": "Hello, Python!\nBob123\nI'm ready to code!",
        "explanation": "The function works with any string input, including numbers in the name"
      }
    ]
  },
  "hello-world-task-2": {
    "id": "hello-world-task-2",
    "title": "Create a Fun Message Generator",
    "problemStatement": "# Message Repeater Challenge! üîÑYour task is to create a function called `create_message` that generates a fun, repeated message.## Function Requirements:1. Take two parameters:   - `text` (a string): The message to repeat   - `times` (a number): How many times to repeat the message2. Return a single string that contains:   - First line: The original message   - Second line: The message repeated the specified number of times   - Third line: The total character count in all messages combined## Example:When you call:> create_message(\"Hi\", 3)It should return:> Original message: Hi\nRepeated message: HiHiHi\nTotal characters: 8Which when displayed looks like:```Original message: HiRepeated message: HiHiHiTotal characters: 8```## Notes:- Use string concatenation (+) for the first two lines- Use string multiplication (*) for the repeated message- Count all characters in both the original and repeated message- Make sure to include the newline characters (\\n) between lines",
    "starterCode": "def create_message(text, times):\n    # Write your code here\n    pass",
    "starterFunctionName": "create_message",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "create_message('Hi', 3)",
        "outputText": "Original message: Hi\nRepeated message: HiHiHi\nTotal characters: 8",
        "explanation": "The function works with any string input, including numbers in the name"
      },
      {
        "id": "example2",
        "inputText": "create_message('Python!', 2)",
        "outputText": "Original message: Python!\nRepeated message: Python!Python!\nTotal characters: 14",
        "explanation": "The function works with any string input, including numbers in the name"
      }
    ]
  },
  "python-variables-task-1": {
    "id": "python-variables-task-1",
    "title": "Student Information Card Generator",
    "problemStatement": "# Student Information Card Generator üìö\n\nCreate a function called `create_student_card` that generates a formatted student information card.\n\n## Function Requirements:\n1. Take four parameters:\n   - `name` (string): Student's name\n   - `age` (integer): Student's age\n   - `grade` (float): Student's grade average\n   - `is_active` (boolean): Student's active status\n\n2. Return a formatted string that displays:\n   - A header line with '== STUDENT CARD =='\n   - Student's name\n   - Student's age (converted to string)\n   - Student's grade with exactly one decimal place\n   - Student's active status\n   - A footer line with '================'\n\n## Important Notes:\n- Use proper variable types for each piece of information\n- Convert numbers to strings when concatenating\n- Format the grade to show exactly one decimal place\n- Use string concatenation to build the card\n- Make sure each piece of information is on its own line\n\n## Tips:\n- Remember to use str() for number conversions\n- Use string formatting for the grade\n- Pay attention to line breaks (\\n)",
    "starterCode": "def create_student_card(name, age, grade, is_active):\n    # Write your code here\n    pass",
    "starterFunctionName": "create_student_card",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "create_student_card('Alice Smith', 15, 92.5, True)",
        "outputText": "== STUDENT CARD ==\nName: Alice Smith\nAge: 15\nGrade: 92.5\nActive: True\n================",
        "explanation": "Creates a properly formatted student card with all information"
      },
      {
        "id": "example2",
        "inputText": "create_student_card('Bob Jones', 14, 88.7, False)",
        "outputText": "== STUDENT CARD ==\nName: Bob Jones\nAge: 14\nGrade: 88.7\nActive: False\n================",
        "explanation": "Shows how the function handles different types of input values"
      }
    ]
  },
  "python-variables-task-2": {
    "id": "python-variables-task-2",
    "title": "Score Calculator",
    "problemStatement": "# Game Score Calculator üéÆ\n\nCreate a function called `calculate_game_stats` that processes game scores and generates a statistics summary.\n\n## Function Requirements:\n1. Take three parameters:\n   - `player_name` (string): Name of the player\n   - `scores` (list of 3 integers): Three round scores\n   - `bonus_multiplier` (float): Bonus point multiplier\n\n2. Calculate and return a formatted string containing:\n   - Player's name\n   - Individual round scores\n   - Average score (as a float with 1 decimal place)\n   - Total score after applying bonus multiplier\n   - Whether the player achieved a high score (True if total > 100)\n\n## Calculations:\n- Average = sum of scores / number of scores\n- Final total = average * bonus_multiplier\n- High score = True if final total > 100\n\n## Notes:\n- Use appropriate variable types for calculations\n- Format decimals to one place\n- Convert numbers to strings for output\n- Include all required information in output",
    "starterCode": "def calculate_game_stats(player_name, scores, bonus_multiplier):\n    # Write your code here\n    pass",
    "starterFunctionName": "calculate_game_stats",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "calculate_game_stats('Mario', [30, 45, 25], 1.5)",
        "outputText": "Player: Mario\nRounds: 30, 45, 25\nAverage: 33.3\nFinal Score: 50.0\nHigh Score: False",
        "explanation": "Shows calculation of game statistics with bonus multiplier"
      },
      {
        "id": "example2",
        "inputText": "calculate_game_stats('Luigi', [75, 80, 95], 1.2)",
        "outputText": "Player: Luigi\nRounds: 75, 80, 95\nAverage: 83.3\nFinal Score: 100.0\nHigh Score: True",
        "explanation": "Demonstrates handling of high scores and different input values"
      }
    ]
  },
  "python-collections-task-1": {
    "id": "python-collections-task-1",
    "title": "Pet Shop Manager üêæ",
    "problemStatement": "# Pet Shop Manager üêæ\n\nCreate a function called `manage_pet_shop` that helps organize a virtual pet shop inventory!\n\n## Function Requirements:\n1. Take three parameters:\n - `new_pet` (string): Name of new pet to add\n - `pet_ages` (dictionary): Dictionary of pet names and their ages\n - `adopted_pets` (list): List of pets that found new homes\n\n2. Your function should:\n - Add the new pet to pet_ages with age 1\n - Remove adopted pets from pet_ages\n - Return a dictionary with:\n   * 'current_pets': List of remaining pets (sorted alphabetically)\n   * 'total_pets': Number of pets left\n   * 'average_age': Average age of remaining pets (rounded to 1 decimal)\n\n## Important Notes:\n- Handle cases where adopted pets aren't in the shop\n- If no pets remain, average_age should be 0.0\n- Remember to sort the current_pets list\n- Use proper dictionary operations\n\n## Tips:\n- Use list and dictionary methods\n- Remember to handle missing keys\n- Keep track of pets and ages carefully",
    "starterCode": "def manage_pet_shop(new_pet, pet_ages, adopted_pets):\n    # Write your code here\n    pass",
    "starterFunctionName": "manage_pet_shop",
    "outputType": "dict",
    "examples": [
      {
        "id": "example1",
        "inputText": "manage_pet_shop('Buddy', {'Max': 3, 'Luna': 2}, ['Max'])",
        "outputText": {
          "current_pets": ["Buddy", "Luna"],
          "total_pets": 2,
          "average_age": 1.5
        },
        "explanation": "Adds Buddy (age 1), removes Max, calculates stats"
      },
      {
        "id": "example2",
        "inputText": "manage_pet_shop('Charlie', {'Rocky': 4}, ['Rocky', 'Missing'])",
        "outputText": {
          "current_pets": ["Charlie"],
          "total_pets": 1,
          "average_age": 1.0
        },
        "explanation": "Handles missing pets and recalculates with only new pet"
      }
    ]
  },
  "python-collections-task-2": {
    "id": "python-collections-task-2",
    "title": "Treasure Chest Sorter üè¥‚Äç‚ò†Ô∏è",
    "problemStatement": "# Treasure Chest Sorter üè¥‚Äç‚ò†Ô∏è\n\nCreate a function called `sort_treasure` that helps organize items in a pirate's treasure chest!\n\n## Function Requirements:\n1. Take three parameters:\n - `new_items` (list): New treasures to add\n - `chest` (set): Current items in chest\n - `magic_items` (tuple): Special items that multiply (each counts as 2)\n\n2. Your function should:\n - Add new items to the chest (remember, sets don't allow duplicates!)\n - Count magic items twice\n - Return a dictionary with:\n   * 'unique_items': Number of different items\n   * 'total_items': Total count (including doubled magic items)\n   * 'has_crown': Boolean showing if 'crown' is in items\n   * 'items_list': Sorted list of all items\n\n## Important Notes:\n- Use appropriate set operations\n- Remember that magic_items is a tuple (can't be changed)\n- Sort the final items list alphabetically\n- Count magic items twice in total_items\n\n## Tips:\n- Convert between sets and lists when needed\n- Use set methods like add() and update()\n- Remember to check for magic items",
    "starterCode": "def sort_treasure(new_items, chest, magic_items):\n    # Write your code here\n    pass",
    "starterFunctionName": "sort_treasure",
    "outputType": "dict",
    "examples": [
      {
        "id": "example1",
        "inputText": "sort_treasure(['coin', 'gem'], {'map'}, ('gem',))",
        "outputText": {
          "unique_items": 3,
          "total_items": 4,
          "has_crown": false,
          "items_list": ["coin", "gem", "map"]
        },
        "explanation": "Adds new items, counts gem twice because it's magical"
      },
      {
        "id": "example2",
        "inputText": "sort_treasure(['crown', 'crown'], {'crown'}, ())",
        "outputText": {
          "unique_items": 1,
          "total_items": 1,
          "has_crown": true,
          "items_list": ["crown"]
        },
        "explanation": "Handles duplicates and crown checking"
      }
    ]
  },
  "python-operators-task-1": {
    "id": "python-operators-task-1",
    "title": "Power-Up Calculator üéÆ",
    "problemStatement": "# Power-Up Calculator üéÆ\n\nCreate a function called `calculate_power` that helps calculate a player's power level in a game!\n\n## Function Requirements:\n1. Take three parameters:\n - `base_power` (integer): Player's base power level\n - `multipliers` (list): List of power multipliers (numbers)\n - `has_special_item` (boolean): Whether player has a special item\n\n2. Your function should:\n - Multiply base_power by the product of all multipliers\n - Add 50 bonus power if has_special_item is True\n - Return a dictionary with:\n   * 'final_power': Final calculated power level\n   * 'is_super_power': True if final power > 100\n   * 'power_category': 'Novice' if < 50, 'Advanced' if < 100, 'Master' if >= 100\n\n## Important Notes:\n- Calculate multiplication before adding bonus\n- Use proper arithmetic operators\n- Handle empty multiplier lists (treat as [1])\n- Round all numbers to integers\n\n## Tips:\n- Use the product of a list: multiple all numbers together\n- Remember to add bonus after multiplication\n- Use if/else for power categories",
    "starterCode": "def calculate_power(base_power, multipliers, has_special_item):\n    # Write your code here\n    pass",
    "starterFunctionName": "calculate_power",
    "outputType": "dict",
    "examples": [
      {
        "id": "example1",
        "inputText": "calculate_power(10, [2, 2], True)",
        "outputText": {
          "final_power": 90,
          "is_super_power": false,
          "power_category": "Advanced"
        },
        "explanation": "Base(10) * 2 * 2 + Special(50) = 90"
      },
      {
        "id": "example2",
        "inputText": "calculate_power(20, [3], False)",
        "outputText": {
          "final_power": 60,
          "is_super_power": false,
          "power_category": "Advanced"
        },
        "explanation": "Base(20) * 3 = 60, no special bonus"
      }
    ]
  },
  "python-operators-task-2": {
    "id": "python-operators-task-2",
    "title": "Battle Score Calculator ‚öîÔ∏è",
    "problemStatement": "# Battle Score Calculator ‚öîÔ∏è\n\nCreate a function called `calculate_battle_score` that determines a player's battle performance!\n\n## Function Requirements:\n1. Take four parameters:\n - `hits` (integer): Number of successful hits\n - `critical_hits` (integer): Number of critical hits\n - `time_bonus` (integer): Remaining time in seconds\n - `difficulty` (string): 'easy', 'medium', or 'hard'\n\n2. Your function should:\n - Calculate base score: (hits * 10) + (critical_hits * 25)\n - Apply time multiplier: 1.5x if time_bonus > 30\n - Apply difficulty multiplier: easy = 1x, medium = 1.5x, hard = 2x\n - Return a dictionary with:\n   * 'total_score': Final score (rounded to integer)\n   * 'perfect_battle': True if hits > 0 and no misses (hits == critical_hits)\n   * 'bonus_achieved': True if total_score > 100\n\n## Important Notes:\n- Use proper order of operations\n- Apply multipliers in correct order\n- Round the final score to nearest integer\n- Handle all difficulty levels\n\n## Tips:\n- Calculate base score first\n- Apply time bonus before difficulty multiplier\n- Use comparison operators for bonuses",
    "starterCode": "def calculate_battle_score(hits, critical_hits, time_bonus, difficulty):\n    # Write your code here\n    pass",
    "starterFunctionName": "calculate_battle_score",
    "outputType": "dict",
    "examples": [
      {
        "id": "example1",
        "inputText": "calculate_battle_score(5, 2, 40, 'medium')",
        "outputText": {
          "total_score": 169,
          "perfect_battle": false,
          "bonus_achieved": true
        },
        "explanation": "((5*10 + 2*25) * 1.5) * 1.5 = 169"
      },
      {
        "id": "example2",
        "inputText": "calculate_battle_score(3, 3, 20, 'easy')",
        "outputText": {
          "total_score": 105,
          "perfect_battle": true,
          "bonus_achieved": true
        },
        "explanation": "All hits are critical (perfect), (3*10 + 3*25) * 1 = 105"
      }
    ]
  },
  "python-string-formatting-task-1": {
    "id": "python-string-formatting-task-1",
    "title": "Game Card Generator üéÆ",
    "problemStatement": "# Game Card Generator üéÆ\n\nCreate a function called `create_game_card` that generates a formatted game character card.\n\n## Function Requirements:\n1. Take four parameters:\n - `character_name` (string): Name of the character\n - `health` (float): Current health points\n - `items` (list): List of inventory items\n - `is_boss` (boolean): Whether character is a boss\n\n2. Return a formatted string containing:\n - A header '== CHARACTER CARD =='\n - Character name with title (add '[BOSS]' prefix if is_boss is True)\n - Health bar: Uses '‚ñ†' for each 10% health (rounded down), '‚ñ°' for empty\n - Health percentage with exactly one decimal place\n - Inventory list with items separated by commas\n - A footer line with '=================='\n\n## Important Notes:\n- Health bar should be exactly 10 characters long\n- Health percentage should include % symbol\n- Format numbers to one decimal place\n- Include all required information on separate lines\n\n## Tips:\n- Use string formatting (%s, %d, %.1f)\n- Remember to add newlines (\\n) between sections\n- Create health bar using string multiplication",
    "starterCode": "def create_game_card(character_name, health, items, is_boss):\n    # Write your code here\n    pass",
    "starterFunctionName": "create_game_card",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "create_game_card('Dragon', 85.5, ['sword', 'shield'], True)",
        "outputText": "== CHARACTER CARD ==\n[BOSS] Dragon\nHealth: ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ° (85.5%)\nInventory: sword, shield\n==================",
        "explanation": "Shows boss character with health bar and inventory"
      },
      {
        "id": "example2",
        "inputText": "create_game_card('Knight', 30.0, ['potion'], False)",
        "outputText": "== CHARACTER CARD ==\nKnight\nHealth: ‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ° (30.0%)\nInventory: potion\n==================",
        "explanation": "Shows regular character with low health"
      }
    ]
  },
  "python-string-formatting-task-2": {
    "id": "python-string-formatting-task-2",
    "title": "Shop Receipt Generator üõçÔ∏è",
    "problemStatement": "# Shop Receipt Generator üõçÔ∏è\n\nCreate a function called `create_receipt` that generates a formatted shopping receipt.\n\n## Function Requirements:\n1. Take four parameters:\n - `shop_name` (string): Name of the shop\n - `items` (list of strings): Names of items purchased\n - `prices` (list of floats): Prices of items\n - `discount` (float): Discount percentage\n\n2. Return a formatted string containing:\n - Shop name in a header with border\n - List of items with prices (one per line)\n - Subtotal of all prices\n - Discount amount (discount % of subtotal)\n - Final total after discount\n - All money values formatted with 2 decimal places\n\n## Important Notes:\n- Format all prices with currency symbol ($)\n- Align prices to the right\n- Show discount even if it's 0\n- Include a border at top and bottom\n\n## Tips:\n- Use string formatting for alignment\n- Remember to calculate totals correctly\n- Format all money values consistently",
    "starterCode": "def create_receipt(shop_name, items, prices, discount):\n    # Write your code here\n    pass",
    "starterFunctionName": "create_receipt",
    "outputType": "string",
    "examples": [
      {
        "id": "example1",
        "inputText": "create_receipt('Magic Shop', ['Potion', 'Sword'], [10.0, 25.5], 10.0)",
        "outputText": "====================\nMAGIC SHOP\n====================\nPotion $10.00\nSword $25.50\n--------------------\nSubtotal: $35.50\nDiscount (10%): $3.55\nTotal: $31.95\n====================",
        "explanation": "Shows receipt with multiple items and discount"
      },
      {
        "id": "example2",
        "inputText": "create_receipt('Market', ['Apple'], [1.50], 0.0)",
        "outputText": "====================\nMARKET\n====================\nApple $1.50\n--------------------\nSubtotal: $1.50\nDiscount (0%): $0.00\nTotal: $1.50\n====================",
        "explanation": "Shows receipt with single item and no discount"
      }
    ]
  }
}
