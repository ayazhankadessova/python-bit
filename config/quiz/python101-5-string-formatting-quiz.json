{
  "id": "python101-5-string-formatting-quiz",
  "title": "String Formatting",
  "description": "Test your knowledge of Python's string formatting techniques to create dynamic and awesome text outputs!",
  "tutorialId": "python101-5-string-formatting",
  "questions": [
    {
      "id": "q1",
      "question": "In Python string formatting, what does the %s symbol represent?",
      "options": [
        "A number with decimal places",
        "A string or text value",
        "A percentage sign",
        "A special character"
      ],
      "correctAnswer": 1,
      "explanation": "The %s format specifier is used for inserting string (text) values into formatted strings. It's like a placeholder where your text will appear."
    },
    {
      "id": "q2",
      "question": "What will this code output? ```python\nprint('Level: %d' % 5)```",
      "options": [
        "Level: 5d",
        "Level: %d5",
        "Level: 5",
        "Error: invalid format"
      ],
      "correctAnswer": 2,
      "explanation": "The %d format specifier is replaced with the integer value 5, resulting in 'Level: 5'. The %d tells Python to expect an integer value."
    },
    {
      "id": "q3",
      "question": "Which of these format specifiers would you use to display a number with exactly 2 decimal places?",
      "options": ["%d", "%s", "%.2f", "%f"],
      "correctAnswer": 2,
      "explanation": "The %.2f format specifier displays a floating-point number with exactly 2 decimal places. For example, '%.2f' % 12.3456 would output '12.35' (with rounding)."
    },
    {
      "id": "q4",
      "question": "What's wrong with this code? ```python\nprint('Player %s has %d gold' % 'Alex')```",
      "options": [
        "The variable 'Alex' should be in quotes",
        "The format string has two specifiers but only one value is provided",
        "The variable should be inside parentheses",
        "The %d should be %s instead"
      ],
      "correctAnswer": 1,
      "explanation": "When formatting multiple values, you need to provide all values as a tuple (with parentheses). The code has two format specifiers (%s and %d) but only provides one value. It should be: print('Player %s has %d gold' % ('Alex', 100))"
    },
    {
      "id": "q5",
      "question": "How would you display a percentage sign after a number in string formatting?",
      "options": [
        "%.2f%% % value",
        "%d% % value",
        "%.2f% % value",
        "%d%% % value"
      ],
      "correctAnswer": 3,
      "explanation": "To display a percentage sign in string formatting, you need to double it as %%. For example, 'Score: %d%%' % 95 would output 'Score: 95%'"
    },
    {
      "id": "q6",
      "question": "What would this code output? ```python\nprint('Accuracy: %.1f%%' % 98.7654)```",
      "options": [
        "Accuracy: 98.8%",
        "Accuracy: 98.7%",
        "Accuracy: 98.7654%",
        "Accuracy: 98%"
      ],
      "correctAnswer": 1,
      "explanation": "The %.1f format specifier rounds the number to 1 decimal place. So 98.7654 becomes 98.8 (rounded up), and the %% prints a literal % sign. The output is 'Accuracy: 98.8%'"
    },
    {
      "id": "q7",
      "question": "Which of these would create a correctly formatted string with multiple values?",
      "options": [
        "```python\nprint('Name: %s, Level: %d' % name, level)```",
        "```python\nprint('Name: %s, Level: %d' % [name, level])```",
        "```python\nprint('Name: %s, Level: %d' % (name, level))```",
        "```python\nprint('Name: %s, Level: %d' % {name, level})```"
      ],
      "correctAnswer": 2,
      "explanation": "When formatting multiple values, you must use a tuple (with parentheses). The correct syntax is: print('Name: %s, Level: %d' % (name, level))"
    },
    {
      "id": "q8",
      "question": "What would happen if you run this code? ```python\nprint('HP: %d / %d' % (50, 100, 200))```",
      "options": [
        "It would print 'HP: 50 / 100'",
        "It would print 'HP: 50 / 100 / 200'",
        "It would print 'HP: 50 / 100 200'",
        "It would raise an error"
      ],
      "correctAnswer": 0,
      "explanation": "When you provide more values than format specifiers, Python ignores the extra values. The code would output 'HP: 50 / 100' and ignore the third value (200)."
    },
    {
      "id": "q9",
      "question": "What's the best way to format a multi-line string with values?",
      "options": [
        "Use + to concatenate multiple lines",
        "Use \\n to create line breaks",
        "Use triple quotes (\"\"\" \"\"\") with format specifiers",
        "Use multiple print statements"
      ],
      "correctAnswer": 2,
      "explanation": "Triple quotes (\"\"\" \"\"\") are best for multi-line strings. You can include format specifiers inside them, just like in regular strings. This creates cleaner, more readable code for game status screens or other multi-line outputs."
    },
    {
      "id": "q10",
      "question": "Which of these would correctly format a decimal number with a comma separator for thousands?",
      "options": [
        "print('%,d' % 1000000)",
        "print('%d,' % 1000000)",
        "It's not possible with % formatting",
        "print('%d' % 1,000,000)"
      ],
      "correctAnswer": 2,
      "explanation": "Basic % formatting doesn't support comma separators for thousands. To format numbers with comma separators, you would need to use a different approach, such as f-strings (in newer Python versions) or the format() method."
    }
  ]
}
