{
  "aura-points-calculator": {
    "id": "aura-points-calculator",
    "title": "Aura Points Calculator",
    "description": "Create the system to track and calculate character energy levels!",
    "date": 1234567890,
    "theme": "gaming-universe",
    "difficulty": "beginner",
    "estimatedTime": "2-3 hours",
    "tags": ["python", "gaming", "beginner", "calculator"],
    "image": "https://picsum.photos/id/236/200",
    "published": true,
    "starterCode": "class Character:\n    def __init__(self, name, base_aura=100):\n        # TODO: Initialize the character attributes here\n        # HINT: You'll need to store:\n        # - character name\n        # - base_aura\n        # - current_aura (starts same as base_aura)\n        # - lists for buffs and debuffs\n        \n        # Example structure:\n        # self.name = name\n        # self.base_aura = base_aura\n        # self.current_aura = base_aura\n        # self.buffs = []  # Will store buff dictionaries\n        # self.debuffs = []  # Will store debuff dictionaries\n        pass\n\n    def add_buff(self, name, power_increase):\n        # TODO: Implement buff addition\n        # HINT: Add a new buff to self.buffs list\n        # Each buff should be a dictionary with name and power\n        # Don't forget to recalculate current_aura after adding buff\n        \n        # Example structure:\n        # new_buff = {\"name\": name, \"power\": power_increase}\n        # self.buffs.append(new_buff)\n        # self.calculate_current_aura()\n        pass\n\n    def add_debuff(self, name, power_decrease):\n        # TODO: Implement debuff addition\n        # HINT: Similar to add_buff, but for negative effects\n        # Add to self.debuffs list and recalculate aura\n        \n        # Example structure:\n        # new_debuff = {\"name\": name, \"power\": power_decrease}\n        # self.debuffs.append(new_debuff)\n        # self.calculate_current_aura()\n        pass\n\n    def calculate_current_aura(self):\n        # TODO: Calculate total aura points\n        # HINT: Start with base_aura\n        # Add all buff powers\n        # Subtract all debuff powers\n        # Make sure aura doesn't go below 0\n        \n        # Example calculation:\n        # total = self.base_aura\n        # for buff in self.buffs:\n        #     total += buff[\"power\"]\n        # for debuff in self.debuffs:\n        #     total -= debuff[\"power\"]\n        # self.current_aura = max(0, total)\n        # return self.current_aura\n        pass\n\n    def display_status(self):\n        # TODO: Print character status\n        # HINT: Should show:\n        # - Character name\n        # - Base aura\n        # - Current aura\n        # - List of active buffs with their powers\n        # - List of active debuffs with their powers\n        \n        # Example format:\n        # print(f\"Character Status: {self.name}\")\n        # print(\"=\" * 30)\n        # print(f\"Base Aura: {self.base_aura}\")\n        # print(f\"Current Aura: {self.current_aura}\")\n        # if self.buffs:\n        #     print(\"Active Buffs:\")\n        #     for buff in self.buffs:\n        #         print(f\"- {buff['name']}: +{buff['power']}\")\n        pass\n\n    def show_aura_bar(self, width=50):\n        # TODO: Display visual aura bar\n        # HINT: Create a progress bar showing current_aura vs base_aura\n        # Use characters like ‚ñà for filled and ‚ñë for empty portions\n        # Show percentage and actual values\n        \n        # Example visualization:\n        # percentage = self.current_aura / self.base_aura\n        # filled = int(width * percentage)\n        # bar = \"‚ñà\" * filled + \"‚ñë\" * (width - filled)\n        # print(f\"Aura Level: {self.current_aura}/{self.base_aura}\")\n        # print(f\"[{bar}] {percentage:.1%}\")\n        pass\n\n# Example usage (uncomment to test):\n# hero = Character(\"Test Hero\")\n# hero.add_buff(\"Training\", 20)\n# hero.add_buff(\"Magic Crystal\", 15)\n# hero.add_debuff(\"Exhaustion\", 10)\n# hero.display_status()\n# hero.show_aura_bar(40)",
    "testCode": "def capture_output(func, *args, **kwargs):\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    func(*args, **kwargs)\n    sys.stdout = sys.__stdout__\n    return output.getvalue()\n\ndef test_character():\n    try:\n        print(\"üß™ Starting Aura Points Calculator Tests...\\n\")\n        \n        # Test 1: Basic Initialization\n        print(\"Test 1: Basic Initialization\")\n        hero = Character(\"Test Hero\")\n        assert hero.name == \"Test Hero\", \"‚ùå Character name not set correctly\"\n        assert hero.base_aura == 100, \"‚ùå Base aura not initialized to default value\"\n        assert hero.current_aura == 100, \"‚ùå Current aura not initialized correctly\"\n        print(\"‚úÖ Basic initialization passed!\\n\")\n\n        # Test 2: Adding Buffs\n        print(\"Test 2: Adding Buffs\")\n        hero.add_buff(\"Training\", 20)\n        assert hero.current_aura == 120, \"‚ùå Buff not applied correctly\"\n        hero.add_buff(\"Magic Crystal\", 15)\n        assert hero.current_aura == 135, \"‚ùå Multiple buffs not stacking correctly\"\n        print(\"‚úÖ Buff system working correctly!\\n\")\n\n        # Test 3: Adding Debuffs\n        print(\"Test 3: Adding Debuffs\")\n        hero.add_debuff(\"Exhaustion\", 10)\n        assert hero.current_aura == 125, \"‚ùå Debuff not applied correctly\"\n        print(\"‚úÖ Debuff system working correctly!\\n\")\n\n        # Test 4: Status Display\n        print(\"Test 4: Status Display\")\n        expected_display = \"\"\"Character Status: Test Hero\\n==============================\\nBase Aura: 100\\nCurrent Aura: 125\\nActive Buffs:\\n- Training: +20\\n- Magic Crystal: +15\\nActive Debuffs:\\n- Exhaustion: -10\"\"\"\n        actual_display = capture_output(hero.display_status).strip()\n        assert actual_display == expected_display, \"‚ùå Status display format incorrect\"\n        print(\"‚úÖ Status display formatting correct!\\n\")\n\n        # Test 5: Aura Bar Display\n        print(\"Test 5: Aura Bar\")\n        expected_bar = \"\"\"Aura Level: 125/100\\n[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 125.0%\"\"\"\n        actual_bar = capture_output(lambda: hero.show_aura_bar(40)).strip()\n        assert actual_bar == expected_bar, \"‚ùå Aura bar visualization incorrect\"\n        print(\"‚úÖ Aura bar visualization correct!\\n\")\n\n        # Final Success Message\n        print(\"üéâ All tests passed! Great work!\")\n        return True\n\n    except AssertionError as e:\n        print(f\"\\n‚ùå Test failed: {str(e)}\")\n        return False\n    except Exception as e:\n        print(f\"\\n‚ùå Error occurred: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    test_character()",
    "solution": ""
},
  "virtual-pet-companion": {
    "id": "virtual-pet-companion",
    "title": "Virtual Pet Companion",
    "description": "Create a fun and educational virtual pet system that simulates pet care and animal facts!",
    "date": 1234567890,
    "theme": "pet-companion",
    "difficulty": "beginner",
    "estimatedTime": "2-3 hours",
    "tags": ["python", "pets", "beginner", "simulator"],
    "image": "https://picsum.photos/id/237/200",
    "published": true,
    "starterCode": "class Pet:\n    def __init__(self, name, species):\n        # TODO: Initialize pet attributes\n        pass\n\n    def feed(self, food_amount):\n        # TODO: Implement feeding mechanics\n        pass\n\n    def play(self, play_time):\n        # TODO: Implement play mechanics\n        pass\n\n    def rest(self, rest_time):\n        # TODO: Implement rest mechanics\n        pass\n\n    def get_status(self):\n        # TODO: Return pet status\n        pass\n\nclass AnimalEncyclopedia:\n    def init(self):\n        # TODO: Initialize encyclopedia\n        pass\n\n    def add_species(self, species, facts):\n        # TODO: Add new species\n        pass\n\n    def get_species_info(self, species):\n        # TODO: Get species information\n        pass\n\n# --------- Uncomment the following code to test your implementation ---------\n# test_pet = Pet('Fluffy', 'cat')\n# print(test_pet.get_status())  # Expected Output: {'name': 'Fluffy', 'species': 'cat', 'hunger': {'value': 50, 'level': 'Moderate'}, 'happiness': {'value': 75, 'level': 'Good'}, 'energy': {'value': 100, 'level': 'Excellent'}}\n# \n# test_pet.feed(30)\n# print(test_pet.hunger)  # Expected Output: 35.0\n# \n# test_pet.play(20)\n# print(test_pet.energy)  # Expected Output: 90.0\n# print(test_pet.happiness)  # Expected Output: 100\n# \n# test_pet.rest(60)\n# print(test_pet.energy)  # Expected Output: 100\n# \n# encyclopedia = AnimalEncyclopedia()\n# encyclopedia.add_species('dog', {'diet': ['omnivore'], 'habitat': 'domestic', 'lifespan': '10-13 years'})\n# print(encyclopedia.get_species_info('dog'))  # Expected Output: {'diet': ['omnivore'], 'habitat': 'domestic', 'lifespan': '10-13 years'}",
    "testCode": "def capture_output(func, *args, **kwargs):\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    func(*args, **kwargs)\n    sys.stdout = sys.__stdout__\n    return output.getvalue()\n\ndef test_pet_companion():\n    try:\n        print(\"üêæ Starting Virtual Pet Tests...\\n\")\n        \n        # Test 1: Pet Creation\n        print(\"Test 1: Pet Creation\")\n        pet = Pet(\"Buddy\", \"dog\")\n        assert hasattr(pet, 'name'), \"‚ùå Pet name not initialized\"\n        assert hasattr(pet, 'species'), \"‚ùå Pet species not initialized\"\n        assert hasattr(pet, 'hunger'), \"‚ùå Pet hunger not initialized\"\n        assert hasattr(pet, 'happiness'), \"‚ùå Pet happiness not initialized\"\n        assert hasattr(pet, 'energy'), \"‚ùå Pet energy not initialized\"\n        print(\"‚úÖ Pet creation successful!\\n\")\n        \n        # Test 2: Feeding System\n        print(\"Test 2: Feeding System\")\n        initial_hunger = pet.hunger\n        pet.feed(30)\n        assert pet.hunger < initial_hunger, \"‚ùå Feeding not decreasing hunger\"\n        assert pet.hunger >= 0, \"‚ùå Hunger went below 0\"\n        assert pet.hunger <= 100, \"‚ùå Hunger exceeded 100\"\n        print(\"‚úÖ Feeding system working!\\n\")\n        \n        # Test 3: Play System\n        print(\"Test 3: Play System\")\n        initial_energy = pet.energy\n        initial_happiness = pet.happiness\n        pet.play(20)\n        assert pet.energy < initial_energy, \"‚ùå Playing not decreasing energy\"\n        assert pet.happiness > initial_happiness, \"‚ùå Playing not increasing happiness\"\n        print(\"‚úÖ Play system working!\\n\")\n        \n        # Test 4: Rest System\n        print(\"Test 4: Rest System\")\n        initial_energy = pet.energy\n        pet.rest(30)\n        assert pet.energy > initial_energy, \"‚ùå Rest not increasing energy\"\n        assert pet.energy <= 100, \"‚ùå Energy exceeded maximum\"\n        print(\"‚úÖ Rest system working!\\n\")\n    \n        # Test 5: Encyclopedia\n        print(\"Test 5: Encyclopedia\")\n        encyclopedia = AnimalEncyclopedia()\n        test_facts = {\"diet\": [\"omnivore\"], \"lifespan\": \"10-13 years\", \"habitat\": \"domestic\"}\n        encyclopedia.add_species(\"dog\", test_facts)\n        info = encyclopedia.get_species_info(\"dog\")\n        assert info == test_facts, \"‚ùå Encyclopedia not storing/retrieving data correctly\"\n        print(\"‚úÖ Encyclopedia working!\\n\")\n        \n        print(\"üéâ All tests passed! Your virtual pet is ready for action!\")\n        return True\n        \n    except AssertionError as e:\n        print(f\"\\n‚ùå Test failed: {str(e)}\")\n        return False\n    except Exception as e:\n        print(f\"\\n‚ùå Error occurred: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    test_pet_companion()",
    "solution": ""
}
}
