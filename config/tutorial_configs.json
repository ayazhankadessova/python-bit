{
  "python101-1-what-is-python": {
    "tutorial_id": "python101-1-what-is-python",
    "title": "What is Python?",
    "description": "Begin your coding journey with Python",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Write your first Python program that prints 'Hello, World!'",
        "expected_output": "Hello, World!",
        "test_code": "def test_hello_world():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    # Run the code\n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    assert actual_output == \"Hello, World!\", f\"Expected 'Hello, World!', but got '{actual_output}'\"\n    return True",
        "hints": [
          "Remember to use the print() function",
          "Make sure to use double quotes around your text",
          "Check your spelling and capitalization"
        ],
        "difficulty": "beginner"
      },
      "2": {
        "exercise_number": 2,
        "description": "Understanding indentation in Python with if statements",
        "expected_output": "Wait... you're still awesome!",
        "test_code": "def test_indentation():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    # Run the code\n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    assert actual_output == \"Wait... you're still awesome!\", f\"Expected 'Wait... you're still awesome!', but got '{actual_output}'\"\n    return True",
        "hints": [
          "Make sure your indentation is consistent",
          "Use 4 spaces for each level of indentation",
          "Check that your if/else statements are properly aligned"
        ],
        "difficulty": "beginner"
      },
      "3": {
        "exercise_number": 3,
        "description": "Make your computer say 'Hello, Python!'",
        "expected_output": "Hello, Python!",
        "test_code": "def test_hello_python():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    assert actual_output == \"Hello, Python!\", f\"Expected 'Hello, Python!', but got '{actual_output}'\"\n    return True",
        "hints": [
          "Use the print() function",
          "Don't forget the quotation marks",
          "Remember proper capitalization"
        ],
        "difficulty": "beginner"
      },
      "4": {
        "exercise_number": 4,
        "description": "String concatenation and multiplication challenge",
        "expected_output": "Hello World!\nHelloHelloHello",
        "test_code": "def test_string_operations():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    expected_lines = [\"Hello World!\", \"HelloHelloHello\"]\n    actual_lines = actual_output.split('\\n')\n    \n    assert len(actual_lines) == 2, \"Expected two lines of output\"\n    assert actual_lines[0] == expected_lines[0], f\"First line should be '{expected_lines[0]}'\"\n    assert actual_lines[1] == expected_lines[1], f\"Second line should be '{expected_lines[1]}'\"\n    return True",
        "hints": [
          "Use + to concatenate strings",
          "Use * to repeat strings",
          "Make sure your spacing is correct in string concatenation"
        ],
        "difficulty": "beginner"
      }
    }
  },
  "python101-2-variables-types": {
    "tutorial_id": "python101-2-variables-types",
    "title": "Python Variables",
    "description": "Learn how to store and work with different types of data in Python",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Create and print variables of different types",
        "test_code": "def test_variables():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        # Check if output contains both number and string\n        assert 'my_favorite_number' in user_code, \"Create a variable named my_favorite_number\"\n        assert 'my_name' in user_code, \"Create a variable named my_name\"\n        assert 'am_i_learning_python' in user_code, \"Create a variable named am_i_learning_python\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Make sure to use the correct variable names",
          "Don't forget to use print() to show the values",
          "Remember: strings need quotes, numbers don't"
        ],
        "difficulty": "beginner"
      },
      "2": {
        "exercise_number": 2,
        "description": "Fix the code by converting number to string",
        "expected_output": "My age: 12",
        "test_code": "def test_string_conversion():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert actual_output == \"My age: 12\", f\"Expected 'My age: 12', but got '{actual_output}'\"\n        assert 'str(12)' in user_code, \"Don't forget to use str() to convert the number\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use str() to convert the number before adding it to text",
          "The format should be: print(\"My age: \" + str(12))",
          "Make sure there's a space after the colon"
        ],
        "difficulty": "beginner"
      },
      "3": {
        "exercise_number": 3,
        "description": "Fix the code by adding str() where needed",
        "expected_output": "My age: 12\nNumber of pets: 3\nFavorite number: 42",
        "test_code": "def test_multiple_conversions():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"My age: 12\\nNumber of pets: 3\\nFavorite number: 42\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        assert 'str(' in user_code, \"Don't forget to use str() to convert numbers\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Remember to convert each number to string when adding to text",
          "Check each line separately to find where str() is needed",
          "Make sure the spacing matches exactly"
        ],
        "difficulty": "beginner"
      },
      "4": {
        "exercise_number": 4,
        "description": "Work with floating point numbers",
        "expected_output": "My height: 5.5\nPizza slices: 3.14",
        "test_code": "def test_floats():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"My height: 5.5\\nPizza slices: 3.14\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        assert 'str(' in user_code, \"Don't forget to convert floats to strings\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Floating point numbers also need str() when adding to strings",
          "Keep the decimal points exactly as shown",
          "Check your spacing after the colons"
        ],
        "difficulty": "beginner"
      },
      "5": {
        "exercise_number": 5,
        "description": "Working with strings",
        "test_code": "def test_strings():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        lines = actual_output.split('\\n')\n        assert len(lines) == 3, \"You should print three lines\"\n        assert all('name' in lines[0].lower(), \"First line should include name\")\n        assert all('game' in lines[1].lower(), \"Second line should include game\")\n        assert all('message' in lines[2].lower(), \"Third line should include message\")\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Make sure to use quotes around string values",
          "You can concatenate strings using +",
          "Double-check your variable names"
        ],
        "difficulty": "beginner"
      },
      "6": {
        "exercise_number": 6,
        "description": "Working with boolean values",
        "test_code": "def test_booleans():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        assert 'is_python_fun = True' in user_code, \"You should set is_python_fun to True\"\n        assert 'am_i_tired = False' in user_code, \"You should set am_i_tired to False\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Boolean values are either True or False",
          "Don't use quotes around True and False",
          "Remember to capitalize True and False"
        ],
        "difficulty": "beginner"
      },
      "7": {
        "exercise_number": 7,
        "description": "Fun with string concatenation and multiplication",
        "test_code": "def test_string_operations():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert \"Hi! I'm Jesse and I'm 13 years old!\" in actual_output, \"Check your greeting format\"\n        assert \"🖐 🖐 🖐 🖐 🖐\" in actual_output, \"The high five emoji should appear 5 times\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use + to join strings together",
          "Use * to repeat strings",
          "Remember to convert numbers to strings"
        ],
        "difficulty": "beginner"
      },
      "8": {
        "exercise_number": 8,
        "description": "Create a coder profile",
        "expected_output": "=======================\n🎮 CODER PROFILE 🎮\n=======================\nName: Amy\nAge: 24\nHobby: Gaming\nLoves Coding: True\n=======================",
        "test_code": "def test_profile():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"=======================\\n🎮 CODER PROFILE 🎮\\n=======================\\nName: Amy\\nAge: 24\\nHobby: Gaming\\nLoves Coding: True\\n=======================\"\n        assert actual_output == expected, \"Check your profile values and format\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Make sure to use the correct values for Amy",
          "Double-check the variable names",
          "Remember: strings need quotes, numbers don't"
        ],
        "difficulty": "beginner"
      },
      "9": {
        "exercise_number": 9,
        "description": "Experiment with string operations",
        "test_code": "def test_string_experiments():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        lines = actual_output.split('\\n')\n        assert lines[0] == \"hahahahaha\", \"First line should be 'ha' repeated 5 times\"\n        assert lines[1] == \"python rules\", \"Second line should combine 'python' and 'rules'\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "For the first line, multiply 'ha' by 5",
          "For the second line, don't forget the space between words",
          "Use + to concatenate strings"
        ],
        "difficulty": "beginner"
      },
      "10": {
        "exercise_number": 10,
        "description": "Fix the broken code",
        "expected_output": "Sam is 13 years old and loves the number 3.5!",
        "test_code": "def test_fix_code():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert actual_output == \"Sam is 13 years old and loves the number 3.5!\", \"Check your output format\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Fix the variable name (remove space)",
          "Convert age to a number",
          "Make sure to use the correct string formatting",
          "Remember to add spaces between words"
        ],
        "difficulty": "beginner"
      }
    }
  },
  "python101-3-collections": {
    "tutorial_id": "python101-3-collections",
    "title": "Python Collections",
    "description": "Learn about Python's amazing ways to store and organize data",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Create and manipulate a list representing a backpack",
        "test_code": "def test_backpack():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        assert 'my_backpack' in local_vars, \"Create a list called my_backpack\"\n        assert isinstance(local_vars['my_backpack'], list), \"my_backpack should be a list\"\n        assert 'flashlight' in local_vars['my_backpack'], \"Don't forget to add the flashlight!\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use square brackets [] to create a list",
          "Use append() to add items to the list",
          "Remember: list indices start at 0"
        ],
        "difficulty": "beginner"
      },
      "2": {
        "exercise_number": 2,
        "description": "Create a fruit basket list and add specific fruits",
        "expected_output": "['apple', 'banana', 'orange']",
        "test_code": "def test_fruit_basket():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        local_vars = locals()\n        assert 'fruit_basket' in local_vars, \"Create a list called fruit_basket\"\n        basket = local_vars['fruit_basket']\n        assert basket == ['apple', 'banana', 'orange'], \"Basket should contain exactly ['apple', 'banana', 'orange']\"\n        assert '.append' in user_code, \"Use the append() method\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Start with an empty list: fruit_basket = []",
          "Use append() to add each fruit",
          "Make sure to add the fruits in the correct order"
        ],
        "difficulty": "beginner"
      },
      "3": {
        "exercise_number": 3,
        "description": "Create and use tuples for storing birthday and color information",
        "test_code": "def test_tuples():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        assert 'my_birthday' in local_vars, \"Create a tuple called my_birthday\"\n        assert isinstance(local_vars['my_birthday'], tuple), \"my_birthday should be a tuple\"\n        assert len(local_vars['my_birthday']) == 3, \"Birthday tuple should have 3 elements\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use parentheses () to create a tuple",
          "Remember: tuples are immutable",
          "Access tuple elements using index numbers"
        ],
        "difficulty": "beginner"
      },
      "4": {
        "exercise_number": 4,
        "description": "Create a tuple for geocache coordinates",
        "expected_output": "Latitude: 37.7749\nFull Location: (37.7749, -122.4194, 10)",
        "test_code": "def test_geocache():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"Latitude: 37.7749\\nFull Location: (37.7749, -122.4194, 10)\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        local_vars = locals()\n        assert isinstance(local_vars['geocache_location'], tuple), \"geocache_location should be a tuple\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Create a tuple with exactly 3 numbers",
          "Use the exact coordinates provided",
          "Print the latitude using index 0"
        ],
        "difficulty": "beginner"
      },
      "5": {
        "exercise_number": 5,
        "description": "Create and manipulate a dictionary for a game character",
        "test_code": "def test_player_dict():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        assert 'player' in local_vars, \"Create a dictionary called player\"\n        player = local_vars['player']\n        assert isinstance(player, dict), \"player should be a dictionary\"\n        assert 'fire blast' in player['powers'], \"Add 'fire blast' to powers\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use curly braces {} to create a dictionary",
          "Add items using square bracket notation",
          "Remember to use quotes for string keys"
        ],
        "difficulty": "beginner"
      },
      "6": {
        "exercise_number": 6,
        "description": "Create and update a game inventory system using dictionaries",
        "expected_output": "Full Inventory: {'health_potion': 7, 'magic_scroll': 3, 'golden_key': 1}\nHealth Potions: 7",
        "test_code": "def test_inventory():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"Full Inventory: {'health_potion': 7, 'magic_scroll': 3, 'golden_key': 1}\\nHealth Potions: 7\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        local_vars = locals()\n        assert local_vars['game_inventory']['health_potion'] == 7, \"Health potions should be 7 after adding 2\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Start with the initial quantities",
          "Use += to increase the health potion count",
          "Print the full dictionary for inventory"
        ],
        "difficulty": "beginner"
      },
      "7": {
        "exercise_number": 7,
        "description": "Create and manipulate a set of Minecraft items",
        "test_code": "def test_minecraft_set():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        assert isinstance(local_vars['minecraft_items'], set), \"minecraft_items should be a set\"\n        assert 'torch' in local_vars['minecraft_items'], \"Don't forget to add the torch!\"\n        assert local_vars['minecraft_items'].count('diamond') == 1 if hasattr(local_vars['minecraft_items'], 'count') else True, \"Set should only have one diamond\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use curly braces {} to create a set",
          "Sets automatically remove duplicates",
          "Use add() to add new items to a set"
        ],
        "difficulty": "beginner"
      },
      "8": {
        "exercise_number": 8,
        "description": "Create a battle royale loadout using a set",
        "expected_output": "Total Unique Weapons: 3",
        "test_code": "def test_battle_loadout():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        loadout = local_vars['battle_loadout']\n        assert isinstance(loadout, set), \"battle_loadout should be a set\"\n        assert len(loadout) == 4, \"Should have exactly 4 weapons\"\n        assert 'grenades' not in loadout, \"Grenades should be removed\"\n        actual_output = output.getvalue().strip()\n        assert actual_output == \"Total Unique Weapons: 4\", \"Output should match exactly\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Create an empty set using set()",
          "Add all weapons one by one",
          "Use remove() to remove grenades",
          "Use len() to count weapons"
        ],
        "difficulty": "beginner"
      },
      "9": {
        "exercise_number": 9,
        "description": "Create a complete game character profile using multiple collection types",
        "expected_output": "=== PLAYER PROFILE ===\nName: DragonSlayer99\nClass: warrior\nWeapons: ['sword', 'bow', 'magic staff', 'throwing axe', 'crossbow']\nTotal Achievements: 5",
        "test_code": "def test_game_profile():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        local_vars = locals()\n        assert local_vars['my_character']['name'] == 'DragonSlayer99', \"Character name should be DragonSlayer99\"\n        assert local_vars['my_character']['class'] == 'warrior', \"Character class should be warrior\"\n        assert len(local_vars['weapons']) == 5, \"Should have 5 weapons\"\n        assert len(local_vars['achievements']) == 5, \"Should have 5 achievements\"\n        actual_output = output.getvalue().strip()\n        assert actual_output == \"=== PLAYER PROFILE ===\\nName: DragonSlayer99\\nClass: warrior\\nWeapons: ['sword', 'bow', 'magic staff', 'throwing axe', 'crossbow']\\nTotal Achievements: 5\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Follow the exact order of weapons",
          "Use the exact character name and class",
          "Add all achievements exactly as specified",
          "Print values in the exact format shown"
        ],
        "difficulty": "beginner"
      },
      "10": {
        "exercise_number": 10,
        "description": "Debug and fix issues with different collection types",
        "expected_output": "Tuple: (1, 2, 3)\nPlayer Stats: {'health': 200}\nLength of my set: 3",
        "test_code": "def test_debug():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"Tuple: (1, 2, 3)\\nPlayer Stats: {'health': 200}\\nLength of my set: 3\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        local_vars = locals()\n        assert local_vars['my_tuple'] == (1, 2, 3), \"Tuple should remain unchanged\"\n        assert len(local_vars['my_set']) == 3, \"Set should have 3 unique elements\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Remember: tuples are immutable",
          "Dictionaries can't have duplicate keys",
          "Sets automatically remove duplicates"
        ],
        "difficulty": "beginner"
      }
    }
  },
  "python101-4-operators": {
    "tutorial_id": "python101-4-operators",
    "title": "Python Operators",
    "description": "Master the magical tools of Python!",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Learn about arithmetic operators in Python",
        "expected_output": "Total Health: 150\nHealth after taking damage: 120\nScore: 75\nEach player gets: 25.0 coins\nQuick split: 33 coins each\nSuper attack damage: 8\nLeftover gems: 1",
        "test_code": "def test_arithmetic_operators():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    # Run the code\n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Total Health: 150\",\n        \"Health after taking damage: 120\",\n        \"Score: 75\",\n        \"Each player gets: 25.0 coins\",\n        \"Quick split: 33 coins each\",\n        \"Super attack damage: 8\",\n        \"Leftover gems: 1\"\n    ]\n    \n    actual_lines = actual_output.split('\\n')\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line {i+1} should be '{expected}', but got '{actual}'\"\n    \n    return True",
        "hints": [
          "Make sure you're using the correct arithmetic operators",
          "Addition is +, subtraction is -, multiplication is *, division is /",
          "Integer division is //, exponentiation is **, and modulo (remainder) is %"
        ],
        "difficulty": "beginner"
      },
      "6": {
        "exercise_number": 6,
        "description": "Fix the operators in the power-up calculator",
        "expected_output": "Power from level: 30\nTotal power: 35\nPower squared: 1225\nLegendary status: False",
        "test_code": "def test_power_calculator():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Power from level: 30\",\n        \"Total power: 35\",\n        \"Power squared: 1225\",\n        \"Legendary status: False\"\n    ]\n    \n    actual_lines = actual_output.split('\\n')\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line {i+1} should be '{expected}', but got '{actual}'\"\n    \n    # Check for correct variable values\n    namespace = {}\n    try:\n        exec(user_code, namespace)\n        if namespace['power_from_level'] != 30:\n            return False, \"power_from_level should be 30\"\n        if namespace['total_power'] != 35:\n            return False, \"total_power should be 35\"\n        if namespace['power_squared'] != 1225:\n            return False, \"power_squared should be 1225\"\n        if namespace['is_legendary'] != False:\n            return False, \"is_legendary should be False\"\n    except Exception as e:\n        return False, str(e)\n    \n    return True",
        "hints": [
          "For power_from_level, use the multiplication operator (*)",
          "For total_power, use the addition operator (+)",
          "For power_squared, use the exponentiation operator (**)",
          "For is_legendary, use the greater than operator (>)"
        ],
        "difficulty": "beginner"
      },
      "7": {
        "exercise_number": 7,
        "description": "Complete the string operations to create a character bio",
        "expected_output": "Character: Alex the Wizard\nPower: ⚡⚡⚡⚡⚡⚡⚡\nStatus: Master of Arcane",
        "test_code": "def test_string_wizard():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Character: Alex the Wizard\",\n        \"Power: ⚡⚡⚡⚡⚡⚡⚡\",\n        \"Status: Master of Arcane\"\n    ]\n    \n    actual_lines = actual_output.split('\\n')\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line {i+1} should be '{expected}', but got '{actual}'\"\n    \n    # Check for correct variable values\n    namespace = {}\n    try:\n        exec(user_code, namespace)\n        if namespace['title'] != \"Alex the Wizard\":\n            return False, \"title should be 'Alex the Wizard'\"\n        if namespace['power_indicator'] != \"⚡⚡⚡⚡⚡⚡⚡\":\n            return False, \"power_indicator should be '⚡⚡⚡⚡⚡⚡⚡'\"\n        if namespace['status'] != \"Master of Arcane\":\n            return False, \"status should be 'Master of Arcane'\"\n    except Exception as e:\n        return False, str(e)\n    \n    return True",
        "hints": [
          "For title, use string concatenation with the + operator",
          "For power_indicator, use the string repetition operator (*)",
          "For status, use the 'in' operator to check if 'Wizard' is in character_class"
        ],
        "difficulty": "intermediate"
      },
      "8": {
        "exercise_number": 8,
        "description": "Build a functional inventory system with list operators",
        "expected_output": "Full inventory: ['health potion', 'map', 'sword', 'shield', 'gold']\nHas weapon: True\nReady for quest: True\nGold: 50",
        "test_code": "def test_inventory_system():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Full inventory: ['health potion', 'map', 'sword', 'shield', 'gold']\",\n        \"Has weapon: True\",\n        \"Ready for quest: True\",\n        \"Gold: 50\"\n    ]\n    \n    actual_lines = actual_output.split('\\n')\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line {i+1} should be '{expected}', but got '{actual}'\"\n    \n    # Check for correct variable values\n    namespace = {}\n    try:\n        exec(user_code, namespace)\n        expected_inventory = ['health potion', 'map', 'sword', 'shield', 'gold']\n        if namespace['inventory'] != expected_inventory:\n            return False, f\"inventory should be {expected_inventory}\"\n        if namespace['has_weapon'] != True:\n            return False, \"has_weapon should be True\"\n        if namespace['ready_for_quest'] != True:\n            return False, \"ready_for_quest should be True\"\n        if namespace['gold_count'] != 50:\n            return False, \"gold_count should be 50\"\n    except Exception as e:\n        return False, str(e)\n    \n    return True",
        "hints": [
          "Use the + operator to combine the starting_items and found_items lists",
          "Use the 'in' operator to check if 'sword' is in the inventory",
          "Use 'in' operator twice with 'and' to check for both items",
          "Use a conditional expression with 'in' to set gold_count"
        ],
        "difficulty": "intermediate"
      },
      "9": {
        "exercise_number": 9,
        "description": "Find and fix the bugs in the code",
        "expected_output": "Fixed player_health: 150\nFixed is_high_score: True\nFixed has_power: True",
        "test_code": "def test_debug_mission():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Fixed player_health: 150\",\n        \"Fixed is_high_score: True\",\n        \"Fixed has_power: True\"\n    ]\n    \n    actual_lines = [line for line in actual_output.split('\\n') if line.startswith(\"Fixed\")]\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} 'Fixed' lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line should be '{expected}', but got '{actual}'\"\n    \n    # Check that the code includes fixes for the bugs\n    if \"int(\" not in user_code and \"100 +\" not in user_code:\n        return False, \"Bug 1 not fixed: player_health should convert '100' to an integer\"\n    \n    if \"==\" not in user_code:\n        return False, \"Bug 2 not fixed: is_high_score should use == for comparison\"\n    \n    if \"(\" not in user_code and \")\" not in user_code:\n        return False, \"Bug 3 not fixed: has_power should use parentheses to fix operator precedence\"\n    \n    return True",
        "hints": [
          "For Bug 1, you need to convert the string '100' to an integer before adding",
          "For Bug 2, you're using assignment (=) instead of comparison (==)",
          "For Bug 3, remember operator precedence - 'and' has higher precedence than 'or'"
        ],
        "difficulty": "intermediate"
      },
      "10": {
        "exercise_number": 10,
        "description": "Create a score calculator with conditional bonuses",
        "expected_output": "Final Score: 300\nNew high score: True",
        "test_code": "def test_score_calculator():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    expected_lines = [\n        \"Final Score: 300\",\n        \"New high score: True\"\n    ]\n    \n    actual_lines = actual_output.split('\\n')\n    \n    if len(actual_lines) != len(expected_lines):\n        return False, f\"Expected {len(expected_lines)} lines of output, but got {len(actual_lines)}\"\n    \n    for i, (actual, expected) in enumerate(zip(actual_lines, expected_lines)):\n        if actual != expected:\n            return False, f\"Line {i+1} should be '{expected}', but got '{actual}'\"\n    \n    # Check for correct variable values\n    namespace = {}\n    try:\n        exec(user_code, namespace)\n        if namespace['final_score'] != 300:\n            return False, \"final_score should be 300\"\n        if namespace['is_new_record'] != True:\n            return False, \"is_new_record should be True\"\n    except Exception as e:\n        return False, str(e)\n    \n    return True",
        "hints": [
          "For the power-up bonus, use a conditional (if statement) to add 100 points",
          "For the critical hit, use a conditional to multiply the score by 2",
          "For high score check, use the > operator to compare final_score with current_high_score"
        ],
        "difficulty": "intermediate"
      }
    }
  },
  "python101-5-if-else": {
    "tutorial_id": "python101-5-if-else",
    "title": "Python Decisions with If-Else",
    "description": "Master the art of making decisions in your code!",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Understanding basic if statements and how they control program flow",
        "expected_output": null,
        "test_code": "def test_if_statements():\n    # This is just a demonstration exercise, no specific test\n    return True",
        "hints": [
          "The code inside an if block only runs when the condition is True",
          "Make sure your indentation is consistent with 4 spaces",
          "You can have multiple statements inside an if block"
        ],
        "difficulty": "beginner"
      },
      "2": {
        "exercise_number": 2,
        "description": "Fix syntax errors in if-else statements",
        "expected_output": "Sorry, you don't have enough gold.\nYou need 5 more gold.\nIncorrect password. Please try again.",
        "test_code": "def test_if_else_fix():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        # Try to execute the code - if there are syntax errors, this will fail\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, f\"Your code still has errors: {str(e)}\"\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    expected_output = \"Sorry, you don't have enough gold.\\nYou need 5 more gold.\\nIncorrect password. Please try again.\"\n    assert actual_output == expected_output, f\"Expected:\\n{expected_output}\\n\\nGot:\\n{actual_output}\"\n    return True",
        "hints": [
          "Check for missing colons after if/else statements",
          "The comparison operator for equality is == not =",
          "Make sure your indentation is consistent"
        ],
        "difficulty": "beginner"
      },
      "3": {
        "exercise_number": 3,
        "description": "Modify elif statements to add a new character class and fix ranking logic",
        "expected_output": "You would make a great Bard!\nYour rank is: Master",
        "test_code": "def test_elif_modify():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check if charisma is being checked first\n    if \"Bard\" not in actual_output:\n        return False, \"You need to add a character class for high charisma characters (Bard)\"\n    \n    # Check if the rank is correctly calculated as Master for score 750\n    if \"Master\" not in actual_output:\n        return False, \"For score 750, the rank should be 'Master'\"\n    \n    return True",
        "hints": [
          "Add a new if statement at the beginning to check charisma > 15",
          "Change > to >= in the score conditions to include the boundary values",
          "Remember that the order of conditions matters!"
        ],
        "difficulty": "intermediate"
      },
      "4": {
        "exercise_number": 4,
        "description": "Modify nested if statements to add a new condition",
        "expected_output": "You have the special ability unlocked!\nYou have enough mana, but you need the special crystal.",
        "test_code": "def test_nested_if_modify():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check for reference to special crystal\n    if \"crystal\" not in actual_output.lower():\n        return False, \"Your code should check for and mention the special crystal requirement\"\n    \n    # Check that the ability is not activated (due to missing crystal)\n    if \"activated\" in actual_output.lower():\n        return False, \"The ability should not activate without the special crystal\"\n    \n    return True",
        "hints": [
          "Add another nested if statement to check has_special_crystal",
          "Make sure to provide feedback if they have mana but not the crystal",
          "The logic should check: unlocked → enough mana → has crystal"
        ],
        "difficulty": "intermediate"
      },
      "5": {
        "exercise_number": 5,
        "description": "Refactor code to use compound conditions instead of nested if statements",
        "expected_output": "Access granted to the restricted area!\nYou need to find the special item first.",
        "test_code": "def test_compound_conditions_refactor():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check that access is granted\n    if \"Access granted\" not in actual_output:\n        return False, \"The code should grant access since has_key_card is True\"\n    \n    # Check that only the special item message is shown\n    if \"Your level is too low\" in actual_output or \"tutorial\" in actual_output:\n        return False, \"Only missing requirements should be shown\"\n    \n    if \"special item\" not in actual_output:\n        return False, \"The code should tell the user they need to find the special item\"\n    \n    return True",
        "hints": [
          "Use 'or' to combine the four access conditions in a single if statement",
          "For the quest requirements, use an if statement with 'and' to check all conditions first",
          "Then use separate if statements to check each specific missing requirement"
        ],
        "difficulty": "intermediate"
      },
      "6": {
        "exercise_number": 6,
        "description": "Complete a weather advisory system with multiple condition checks",
        "expected_output": "Current Weather: 85°F, Humidity: 75%, Wind: 15 mph\nRain: No\nAdvisory: Hot and humid conditions. Watch for heat exhaustion and stay hydrated.",
        "test_code": "def test_weather_system():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check for temperature and humidity advisories\n    if \"85°F\" not in actual_output:\n        return False, \"Expected temperature output not found\"\n    \n    # For hot and humid conditions\n    if \"humid\" not in actual_output.lower() or \"heat\" not in actual_output.lower():\n        return False, \"For hot (85°F) and humid (75%) conditions, warn about heat exhaustion\"\n    \n    return True",
        "hints": [
          "Use if/elif for temperature ranges (extreme heat, hot, moderate, cold)",
          "Use nested if statements to check for humidity and rain within temperature ranges",
          "Use a separate if statement for high wind regardless of temperature"
        ],
        "difficulty": "intermediate"
      },
      "7": {
        "exercise_number": 7,
        "description": "Create a grade calculator with specific feedback based on score",
        "expected_output": "Score: 88\nGrade: B\nYou're only 2 points away from an A!",
        "test_code": "def test_grade_calculator():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check that the grade is correct\n    if \"Grade: B\" not in actual_output:\n        return False, \"For score 88, the grade should be B\"\n    \n    # Check that the points needed message is included\n    if \"2 points\" not in actual_output:\n        return False, \"Should mention being 2 points away from an A\"\n    \n    return True",
        "hints": [
          "Use if/elif/else to determine the letter grade",
          "Calculate points needed as the difference between their score and the next grade threshold",
          "Add specific if statements to provide personalized feedback based on the situation"
        ],
        "difficulty": "intermediate"
      },
      "8": {
        "exercise_number": 8,
        "description": "Debug a text adventure game with multiple logical errors",
        "expected_output": "CASTLE ADVENTURE DEBUG QUEST\nYou are a warrior.\n\nYou approach the castle gate.\nYou slash the gate open with your sword!\n\nA monster appears!\nYou defeat the monster with your sword!\n\nYou find the treasure room!\nYou use your sword to pry open the chest!\n\nCongratulations! You defeated the monster and got the treasure!",
        "test_code": "def test_adventure_debug():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, f\"Your code still has errors: {str(e)}\"\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Check for key phrases that should appear\n    if \"slash the gate open with your sword\" not in actual_output:\n        return False, \"As a warrior with a sword, you should slash the gate open\"\n    \n    if \"defeat the monster with your sword\" not in actual_output:\n        return False, \"As a warrior with a sword, you should defeat the monster\"\n    \n    if \"Congratulations\" not in actual_output:\n        return False, \"The game should end with congratulations for completing the adventure\"\n    \n    return True",
        "hints": [
          "Fix syntax errors: 'else if' should be 'elif'",
          "Fix comparison operators: = should be == for comparisons",
          "Add missing colons (:) at the end of if/elif/else lines",
          "Fix logical errors in condition combinations"
        ],
        "difficulty": "advanced"
      },
      "9": {
        "exercise_number": 9,
        "description": "Create a complex RPG character ability calculator",
        "expected_output": "CHARACTER ABILITY CALCULATOR\nLevel 7 Character\nSTR: 16, INT: 14, DEX: 12, CHA: 15\nMana: 35\n\nAvailable abilities:\n- Power Attack\n- Cast Spell\n- Fireball\n- Healing\n- Persuade\n- Intimidate",
        "test_code": "def test_rpg_ability_calculator():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    \n    try:\n        exec(user_code)\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)\n    \n    sys.stdout = sys.__stdout__\n    actual_output = output.getvalue().strip()\n    \n    # Must-have abilities for the given character stats\n    must_have = [\"Power Attack\", \"Cast Spell\", \"Fireball\", \"Healing\", \"Persuade\", \"Intimidate\"]\n    should_not_have = [\"Dual Wield\", \"Shield Bash\", \"Precise Shot\", \"Arcane Mastery\", \"Sneak Attack\", \"Pick Lock\"]\n    \n    for ability in must_have:\n        if ability not in actual_output:\n            return False, f\"Missing ability: {ability} should be available with these stats\"\n    \n    for ability in should_not_have:\n        if ability in actual_output:\n            return False, f\"Incorrect ability: {ability} should NOT be available with these stats\"\n    \n    return True",
        "hints": [
          "Use if statements to check each ability's requirements",
          "Append abilities to the available_abilities list when requirements are met",
          "Use logical operators (and, or) to combine multiple conditions",
          "Be careful with list operations - use 'in' to check if a spell is in known_spells"
        ],
        "difficulty": "advanced"
      }
    }
  },
  "python101-7-conditions": {
    "tutorial_id": "python101-7-conditions",
    "title": "Conditional Statements for Decision-Making",
    "description": "Learn how to make your code think and decide like a game master!",
    "exercises": {
      "1": {
        "exercise_number": 1,
        "description": "Practice using 'if' and 'else' statements to check player name length",
        "test_code": "def test_player_name():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'if len(player_name)' in user_code, \"Use len() to check player_name length\"\n        assert 'else' in user_code, \"Use an else statement\"\n        assert 'Welcome to the game' in actual_output, \"Welcome message should be shown\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use len(player_name) to get the length of the string",
          "Use >= to check if length is greater than or equal to 3",
          "Don't forget to indent the code inside the if and else blocks"
        ],
        "difficulty": "beginner"
      },
      "2": {
        "exercise_number": 2,
        "description": "Practice checking for special powers with string methods",
        "test_code": "def test_dragon_powers():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'startswith' in user_code, \"Use the startswith() method\"\n        assert 'dragon-taming powers' in actual_output.lower(), \"Check for dragon powers message\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use player_name.startswith() to check if the name starts with 'Dragon'",
          "Make sure to match the case exactly ('Dragon' not 'dragon')",
          "Don't forget to print the dragon taming powers message"
        ],
        "difficulty": "beginner"
      },
      "3": {
        "exercise_number": 3,
        "description": "Practice using comparison operators with player health and dragon detection",
        "test_code": "def test_comparisons():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert '==' in user_code, \"Use == for equality check\"\n        assert '>' in user_code, \"Use > for greater than\"\n        assert '!=' in user_code, \"Use != for not equal to\"\n        assert 'Health is full!' in actual_output, \"Check for full health message\"\n        assert 'Dragon alert!' in actual_output, \"Check for dragon alert message\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use == to check if player_health equals 100",
          "Use > to check if player_health is greater than 50",
          "Use != to check if dragon_nearby is not equal to False"
        ],
        "difficulty": "beginner"
      },
      "4": {
        "exercise_number": 4,
        "description": "Mini-game: Predict what the code will output",
        "expected_output": "Super powerful! ⚡\nStill room to grow! 📚",
        "test_code": "def test_wizard_power():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        expected = \"Super powerful! ⚡\\nStill room to grow! 📚\"\n        assert actual_output == expected, f\"Expected '{expected}', but got '{actual_output}'\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Both conditions are true, so both print statements will execute",
          "75 is greater than 50, so 'Super powerful!' will print",
          "75 is less than 100, so 'Still room to grow!' will also print"
        ],
        "difficulty": "beginner"
      },
      "5": {
        "exercise_number": 5,
        "description": "Practice using the 'in' operator to check inventory contents",
        "test_code": "def test_inventory():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'in inventory' in user_code, \"Use 'in' to check inventory\"\n        assert \"You're armed and ready!\" in actual_output, \"Check for armed message\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use 'item in inventory' to check if an item exists",
          "The inventory is already created for you using split()",
          "Check if 'Sword' is in the inventory"
        ],
        "difficulty": "beginner"
      },
      "6": {
        "exercise_number": 6,
        "description": "Practice using if-elif-else chains for multiple conditions",
        "expected_output": "You charge into battle with your sword! ⚔️",
        "test_code": "def test_elif():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'if' in user_code, \"Use if statement\"\n        assert 'elif' in user_code, \"Use elif for additional conditions\"\n        assert 'else' in user_code, \"Use else for default case\"\n        assert actual_output == \"You cast powerful spells! 🔮\", \"Output should match expected\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use if for the first condition (warrior)",
          "Use elif for the middle conditions (mage, archer)",
          "Use else for the default case",
          "Don't forget to use .lower() for case insensitivity"
        ],
        "difficulty": "beginner"
      },
      "7": {
        "exercise_number": 7,
        "description": "Practice using complex conditions with 'and', 'or', and parentheses",
        "expected_output": "You can defeat the dragon! 🗡️",
        "test_code": "def test_complex_conditions():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'and' in user_code, \"Use 'and' to combine conditions\"\n        assert 'or' in user_code, \"Use 'or' for alternative conditions\"\n        assert '(' in user_code and ')' in user_code, \"Use parentheses for grouping\"\n        assert actual_output == \"You can defeat the dragon! 🗡️\", \"Output should match expected\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use parentheses to group the 'player_level >= 5 and has_magic_sword'",
          "Use 'or' to combine with 'dragon_health < 50'",
          "Make sure to use the right condition for the expected output"
        ],
        "difficulty": "intermediate"
      },
      "8": {
        "exercise_number": 8,
        "description": "Create a quest status checker with multiple conditions",
        "expected_output": "Quest is ACTIVE!\nYou have all required items!\nYou meet the level requirement!",
        "test_code": "def test_quest_checker():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'quest_status == \"ACTIVE\"' in user_code, \"Check if quest is active\"\n        assert 'in quest_items_found' in user_code, \"Check for required items\"\n        assert 'quest_level >= 2' in user_code or 'quest_level > 1' in user_code, \"Check level requirement\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Check if quest_status equals \"ACTIVE\"",
          "Check if all required items are in quest_items_found",
          "Check if quest_level is at least 2"
        ],
        "difficulty": "intermediate"
      },
      "9": {
        "exercise_number": 9,
        "description": "Create a path choice system with different requirements",
        "expected_output": "You can enter the cave!\nYou can enter the mountain!\nYou can enter the forest!",
        "test_code": "def test_path_choice():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'path_chosen == \"cave\"' in user_code, \"Check if path is cave\"\n        assert 'has_torch' in user_code, \"Check for torch requirement\"\n        assert 'player_hp > 50' in user_code, \"Check hp requirement for cave\"\n        assert 'path_chosen == \"mountain\"' in user_code, \"Check if path is mountain\"\n        assert 'player_hp > 70' in user_code, \"Check hp requirement for mountain\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use if statements to check the value of path_chosen",
          "For cave, check has_torch and player_hp > 50",
          "For mountain, check player_hp > 70",
          "For forest, no conditions needed"
        ],
        "difficulty": "intermediate"
      },
      "10": {
        "exercise_number": 10,
        "description": "Debug and fix comparison with string value",
        "expected_output": "Super strong!",
        "test_code": "def test_debug1():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'int' in user_code, \"Convert string to integer\"\n        assert actual_output == \"Super strong!\", \"Output should match expected\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "The issue is that player_power is a string (\"100\")",
          "Convert player_power to an integer using int(player_power)",
          "Then you can compare it with the number 50"
        ],
        "difficulty": "beginner"
      },
      "11": {
        "exercise_number": 11,
        "description": "Debug and fix equality check in condition",
        "expected_output": "Armed!",
        "test_code": "def test_debug2():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert '==' in user_code, \"Use == for equality check\"\n        assert actual_output == \"Armed!\", \"Output should match expected\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "The issue is using = (assignment) instead of == (comparison)",
          "Change weapon = \"Sword\" to weapon == \"Sword\"",
          "= assigns values, == compares values"
        ],
        "difficulty": "beginner"
      },
      "12": {
        "exercise_number": 12,
        "description": "Create a complete game check system by parsing player stats",
        "expected_output": "Player name: MightyHero\nLevel check: PASSED (7)\nHealth check: PASSED (85)\nInventory check: PASSED (Has Sword and Shield)\nQuest check: PASSED (On correct quest)\nREADY FOR DRAGON BATTLE!",
        "test_code": "def test_final_challenge():\n    import io\n    import sys\n    output = io.StringIO()\n    sys.stdout = output\n    try:\n        exec(user_code)\n        sys.stdout = sys.__stdout__\n        actual_output = output.getvalue().strip()\n        assert 'split' in user_code, \"Use split to parse stats\"\n        assert 'LEVEL: ' in user_code, \"Extract level from stats\"\n        assert 'HEALTH: ' in user_code, \"Extract health from stats\"\n        assert 'INVENTORY: ' in user_code, \"Extract inventory from stats\"\n        assert 'CURRENT_QUEST: ' in user_code, \"Extract quest from stats\"\n        assert '>= 5' in user_code or '> 4' in user_code, \"Check if level is 5 or higher\"\n        assert '> 80' in user_code or '>= 81' in user_code, \"Check if health is above 80\"\n        assert 'Sword' in user_code and 'Shield' in user_code, \"Check for both sword and shield\"\n        assert 'DefeatDragon' in user_code, \"Check if current quest is DefeatDragon\"\n        return True\n    except Exception as e:\n        sys.stdout = sys.__stdout__\n        return False, str(e)",
        "hints": [
          "Use split('\\n') to separate lines in player_stats",
          "Use split(':') to separate labels from values",
          "Extract values for NAME, LEVEL, HEALTH, INVENTORY, and CURRENT_QUEST",
          "Use in to check inventory items",
          "Use comparison operators to check level and health"
        ],
        "difficulty": "advanced"
      }
    }
  }
}
