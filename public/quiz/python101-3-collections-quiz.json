{
  "id": "python101-3-collections-quiz",
  "title": "Collections",
  "description": "Test your knowledge of Python's amazing collection types: lists, tuples, dictionaries, and sets!",
  "tutorialId": "python101-3-collections",
  "questions": [
    {
      "id": "q1",
      "question": "Which Python collection type allows you to add and remove items after creation?",
      "options": [
        "Tuples",
        "Lists",
        "Both tuples and lists",
        "Neither tuples nor lists"
      ],
      "correctAnswer": 1,
      "explanation": "Lists are mutable, meaning you can add, remove, or modify items after creating them. Tuples, on the other hand, are immutable - once created, you cannot change their contents.",
      "imageUrl": "/quizzes/python101-3-collections/q1.jpg"
    },
    {
      "id": "q2",
      "question": "What will happen if you try to add 'diamond' to this set? ```python\nminecraft_items = {'sword', 'pickaxe', 'diamond'}```",
      "options": [
        "It will add a second 'diamond' to the set",
        "It will raise an error because 'diamond' already exists",
        "Nothing will happen because sets don't allow duplicates",
        "It will replace the existing 'diamond' with a new one"
      ],
      "correctAnswer": 2,
      "explanation": "Sets automatically eliminate duplicates. When you try to add an item that already exists in a set, nothing happens - the set remains unchanged."
    },
    {
      "id": "q3",
      "question": "Which method would you use to add multiple items to a list at once?",
      "options": [
        "list.add()",
        "list.append()",
        "list.extend()",
        "list.insert()"
      ],
      "correctAnswer": 2,
      "explanation": "The .extend() method adds multiple items to a list at once. For example, my_list.extend(['apple', 'banana']) would add both items to my_list.",
      "imageUrl": "/quizzes/python101-3-collections/q3.png"
    },
    {
      "id": "q4",
      "question": "What is the correct way to access the value of 'health' in this dictionary? ```python\nplayer = {'name': 'CoolGamer123', 'health': 100}```",
      "options": [
        "player.health",
        "player['health']",
        "player(health)",
        "player.get['health']"
      ],
      "correctAnswer": 1,
      "explanation": "To access a value in a dictionary, you use square brackets with the key name. In this case, player['health'] would return 100."
    },
    {
      "id": "q5",
      "question": "What would happen if you run this code? ```python\ncoordinates = (37.7749, -122.4194)\ncoordinates[0] = 38.5816```",
      "options": [
        "The first element will be changed to 38.5816",
        "The entire tuple will be replaced with 38.5816",
        "It will raise an error because tuples are immutable",
        "It will create a new tuple with the updated value"
      ],
      "correctAnswer": 2,
      "explanation": "Tuples are immutable, which means once created, you cannot modify their elements. Trying to change an element will raise a TypeError.",
      "imageUrl": "/quizzes/python101-3-collections/q5.png"
    },
    {
      "id": "q6",
      "question": "What will the following code output? ```python\nfruits = ['apple', 'banana', 'orange']\nprint(fruits[1])```",
      "options": ["apple", "banana", "orange", "['apple', 'banana', 'orange']"],
      "correctAnswer": 1,
      "explanation": "In Python, list indexing starts at 0. So fruits[0] would be 'apple', fruits[1] is 'banana', and fruits[2] is 'orange'."
    },
    {
      "id": "q7",
      "question": "Which collection would be best for storing a user's game achievements where each achievement can only be earned once?",
      "options": ["List", "Tuple", "Dictionary", "Set"],
      "correctAnswer": 3,
      "explanation": "Sets are perfect for storing achievements because they automatically prevent duplicates. Each achievement can only appear once in the set, just like how you can only earn an achievement once in a game.",
      "imageUrl": "/quizzes/python101-3-collections/q7.png"
    },
    {
      "id": "q8",
      "question": "What's wrong with this dictionary? ```python\nplayer_stats = {'health': 100, 'health': 200}```",
      "options": [
        "Nothing, it's perfectly valid",
        "Dictionary keys can't be strings",
        "Dictionary keys must be unique",
        "The values should be in a list"
      ],
      "correctAnswer": 2,
      "explanation": "Dictionary keys must be unique. If you try to create a dictionary with duplicate keys, the last value assigned to that key will overwrite previous values. In this case, 'health' would end up with a value of 200."
    },
    {
      "id": "q9",
      "question": "Which of these collection types is ordered?",
      "options": [
        "Only lists",
        "Lists and tuples",
        "Lists, tuples, and dictionaries",
        "All Python collections (lists, tuples, dictionaries, and sets)"
      ],
      "correctAnswer": 1,
      "explanation": "Both lists and tuples maintain the order of items as they were added. In modern Python, dictionaries also preserve insertion order, but sets are unordered collections.",
      "imageUrl": "/quizzes/python101-3-collections/q9.png"
    },
    {
      "id": "q10",
      "question": "What will this code output? ```python\ninventory = {'health_potion': 5}\ninventory['health_potion'] += 2\nprint(inventory['health_potion'])```",
      "options": ["5", "2", "7", "Error"],
      "correctAnswer": 2,
      "explanation": "This code adds 2 to the current value of 'health_potion' (which is 5), resulting in 7. The += operator is a shorthand for inventory['health_potion'] = inventory['health_potion'] + 2."
    }
  ]
}
