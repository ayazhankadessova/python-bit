{
    "sections": [
      {
        "title": "1. Let's create the basic structure for our Character class",
        "description": "Before adding game mechanics, we need a foundational class to represent our characters. Each character will have:",
        "features": [
          "A name to identify them.",
          "A base_aura, which is their starting aura level (default is 100).",
          "A current_aura that tracks their aura as it changes during the game.",
          "Two lists, buffs and debuffs, to store any temporary effects that strengthen or weaken the character."
        ],
        "code": {
          "language": "python",
          "content": "class Character:\n    def __init__(self, name, base_aura=100):\n        self.name = name\n        .\n        .\n        ."
        }
      },
        {
          "title": "2. Giving superpowers to your character",
          "description": "Add a power-up buff to the character",
          "function": "add_buff",
          "parameters": [
            {"name": "name", "type": "str", "description": "The name of the buff"},
            {"name": "power_increase", "type": "int", "description": "The power increase of the buff"}
          ],
          "code": {
            "language": "python",
            "content": "def add_buff(self, name, power_increase):\n    self.buffs.append({\"name\": name, \"power\": power_increase})\n    self.calculate_current_aura()"
          }
        },
        {
          "title": "3. Adding a power-down debuff to your character",
          "description": "Add a power-down debuff to the character",
          "function": "add_debuff",
          "parameters": [
            {"name": "name", "type": "str", "description": "The name of the debuff"},
            {"name": "power_decrease", "type": "int", "description": "The power decrease of the debuff"}
          ],
          "code": {
            "language": "python",
            "content": "def add_debuff(self, name, power_decrease):\n    self.debuffs.append({\"name\": name, \"power\": power_decrease})\n    self.calculate_current_aura()"
          }
        },
        {
          "title": "4. Calculate your character's current aura",
          "description": "Calculate total aura points including buffs and debuffs",
          "function": "calculate_current_aura",
          "parameters": [],
          "code": {
            "language": "python",
            "content": "def calculate_current_aura(self):\n    total = self.base_aura\n    for buff in self.buffs:\n        total += buff[\"power\"]\n    for debuff in self.debuffs:\n        total -= debuff[\"power\"]\n    self.current_aura = max(0, total)\n    return self.current_aura"
          }
        },
        {
          "title": "5. Displaying character's current status",
          "description": "Display character's current status",
          "function": "display_status",
          "parameters": [],
          "code": {
            "language": "python",
            "content": "def display_status(self):\n    print(f\"\\nCharacter Status: {self.name}\")\n    print(\"=\" * 30)\n    print(f\"Base Aura: {self.base_aura}\")\n    print(f\"Current Aura: {self.current_aura}\")\n    if self.buffs:\n        print(\"\\nActive Buffs:\")\n        for buff in self.buffs:\n            print(f\"- {buff['name']}: +{buff['power']}\")\n    if self.debuffs:\n        print(\"\\nActive Debuffs:\")\n        for debuff in self.debuffs:\n            print(f\"- {debuff['name']}: -{debuff['power']}\")"
          }
        },     
      {
        "title": "6. Visual Representation",
        "description": "Let's add a method to show a visual representation of the character's energy level:",
        "code": {
          "language": "python",
          "content": "def show_aura_bar(self, width=50):\n    \"\"\"Display a visual representation of the aura level\"\"\"\n    percentage = self.current_aura / self.base_aura\n    filled_length = int(width * percentage)\n    bar = '█' * filled_length + '░' * (width - filled_length)\n    print(f\"\\nAura Level: {self.current_aura}/{self.base_aura}\")\n    print(f\"[{bar}] {percentage:.1%}\")"
        }
      },
      {
        "title": "7. Save and Load Feature",
        "description": "Now, let's add the ability to save and load character data:",
        "code": {
          "language": "python",
          "content": "import json\n\ndef save_character(self, filename):\n    \"\"\"Save character data to a JSON file\"\"\"\n    data = {\n        \"name\": self.name,\n        \"base_aura\": self.base_aura,\n        \"current_aura\": self.current_aura,\n        \"buffs\": self.buffs,\n        \"debuffs\": self.debuffs\n    }\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    print(f\"\\nCharacter data saved to {filename}\")\n\n@classmethod\ndef load_character(cls, filename):\n    \"\"\"Load character data from a JSON file\"\"\"\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    character = cls(data[\"name\"], data[\"base_aura\"])\n    character.current_aura = data[\"current_aura\"]\n    character.buffs = data[\"buffs\"]\n    character.debuffs = data[\"debuffs\"]\n    return character"
        }
      },
      {
        "title": "Example Usage",
        "description": "Here's how to use the Aura Points Calculator:",
        "code": {
          "language": "python",
          "content": "# Create a new character\nhero = Character(\"Zephyr\", base_aura=100)\n\n# Add some buffs and debuffs\nhero.add_buff(\"Training\", 20)\nhero.add_buff(\"Magic Crystal\", 15)\nhero.add_debuff(\"Exhaustion\", 10)\n\n# Display status and visual representation\nhero.display_status()\nhero.show_aura_bar()\n\n# Save character data\nhero.save_character(\"hero_data.json\")\n\n# Load character data\nloaded_hero = Character.load_character(\"hero_data.json\")"
        }
      },
      {
        "title": "Challenge Tasks",
        "description": "Enhance your system with these tasks:",
        "features": [
          "Add a method to remove buffs and debuffs",
          "Implement a time limit for buffs/debuffs",
          "Create different character classes with unique base stats",
          "Add special abilities that temporarily boost aura",
          "Implement a battle system between two characters"
        ]
      },
      {
        "title": "Tips",
        "description": "Helpful suggestions for improving your system:",
        "features": [
          "Always validate input values to prevent negative numbers",
          "Consider adding maximum limits to prevent overpowered characters",
          "Use descriptive names for buffs and debuffs",
          "Add error handling for file operations",
          "Consider adding different types of aura (e.g., attack, defense)"
        ]
      },
      {
        "title": "Sample Output",
        "description": "Expected output when running the Aura Points Calculator:",
        "output": [
          "Character Status: Zephyr",
          "==============================",
          "Base Aura: 100",
          "Current Aura: 125",
          "",
          "Active Buffs:",
          "- Training: +20",
          "- Magic Crystal: +15",
          "",
          "Active Debuffs:",
          "- Exhaustion: -10",
          "",
          "Aura Level: 125/100",
          "[████████████████████████████░░░░░░░░░░░░░░░░░░░░░░] 125.0%"
        ]
      },
      {
        "title": "Conclusion",
        "description": "Congratulations! You've built a complete aura points system that you can use in your games. This project demonstrates:",
        "features": [
          "Object-oriented programming principles",
          "Data persistence with JSON",
          "Visual representation of data",
          "Game mechanics fundamentals"
        ],
        "final_note": "Feel free to expand upon this system by adding more features or integrating it into a larger game project!"
      }
    ]
  }  